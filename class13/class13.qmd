---
title: "class13"
format: pdf
---


```{r}
#| echo: false
2 * 2
```


```{r}
#install.packages("BiocManager")
#BiocManager::install()
# For this class we will need DESeq2:
#BiocManager::install("DESeq2")

library(BiocManager)
library(DESeq2)
```


## Importing countData and colData
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```


```{r}
head(metadata)
```


```{r}
dim(metadata)
```


>Q1. How many genes are in this dataset?

8
>Q2. How many 'control' cell lines do we have?

4


Compare the control to the treated columns. Steps:

-Step 1: ID and extract the "control" columns
-Step 2: calculate the mean value per gene for all these "control" columns
-Step 3: do the same for treated
-Step 4: compare the 'control.mean' and 'treated.mean' values

Step1: 
```{r}
control.inds <-metadata$dex=="control"
```

```{r}
metadata[control.inds,]
```

Ensembl gene ID: ENSG00000000003
Metadata sheet: SRR1039508

```{r}
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```
```{r}
treated.mean <- rowMeans(counts[,metadata$dex=="treated"])
head(treated.mean)
```

We will combine our meancount data for bookkeeping purposes.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


Lets see what these count values look like....

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)

ggplot(meancounts) + 
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.2)
```

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

log="xy" or scale_x_continuous(trans="log2")/scale_y_continuous(trans="log2")

```{r}
plot(meancounts, log="xy")
```

```{r}
#in ggplot
ggplot(meancounts) + 
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.2)+
  scale_x_continuous(trans="log2")+
   scale_y_continuous(trans="log2")
  
```

Logs are super useful when we have such skewed data they are also handy when we are most interested in

```{r}
#treated/control
10/10
```

```{r}
log2(20/10)
```

add log2(Fold-change) values to our results table. 

```{r}
meancounts$log2fc <-log2(meancounts$treated.mean/
                           meancounts$control.mean)

head(meancounts)
```

There are NaN and -Inf results. The NaN is returned when you divide by zero and try to take the log. The -Inf is returned when you try to take the log of zero. 

Need to exclude any genes with zero counts as we can't say anything about them anyway from this experiment and it causes me math pain. >_<

```{r}
#what values in the first two cols are zero
to.rm.inds<-rowSums(meancounts[, 1:2] == 0) >0
mycounts<-meancounts[!to.rm.inds,]
```

```{r}
which(c(T, F, T))
```

This is another way to do it:

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```


 >Q. How many genes do i have left?
 
```{r}
nrow(mycounts)
```
 
 
 >Q8. How many genes are "up regulated" ie. have a log2(fold-change) greater than +2?
 
```{r}
sum(mycounts$log2fc > +2)
```
 
>Q9. How many are "down regulated"" 

```{r}
sum(mycounts$log2f < -2)
```


>Q10. Do you trust these results? Why or why not?

No I don't trust because we don't know if these are significant. 


## setting up for DESeq

Like many bioconductor analysis packages DESeq wants it's input in a very particular way. 

```{r}
library(DESeq2)
citation("DESeq2")
```


```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata,
                       design=~dex)
```


To run DESeq analysis we call the main function from the package called 'DESeq(dds)'


```{r}
dds<- DESeq(dds)
```


To get the results out of this 'dds' object we can use the DESeq 'results()' function.

```{r}
res <- results (dds)
head(res)
```

A common summary visualization is called a volcano plot. 

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange> 2] <- "black"
mycols[res$log2FoldChange< -2] <- "black"
mycols[res$padj>0.05] <-"gray"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), col=mycols,
     xlab="Log2 Fold-Change", 
     ylab="-log P-Value")

abline(v=c(2, -2), col="red")
abline(h=-log(0.05), col="blue")
```


#Save our results to date

```{r}
write.csv(res, file="myresults.csv")
```


we need to translate or "map" our ensemble ID's into more understandable gene names and the identifiers that other useful databases use. 

```{r}
BiocManager::install("AnnotationDbi") 
BiocManager::install("org.Hs.eg.db")
library(AnnotationDbi)
library("org.Hs.eg.db")
```


```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
# Run in your R console (i.e. not your Rmarkdown doc!)
BiocManager::install( c("pathview", "gage", "gageData") )
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
#look at the first three down (less) pathways

head(keggres$less, 3)
```

lets have a look at one of these pathways

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The Asthma pathway from KEGG ](hsa05310.pathview.png)
